import os
import logging
import speech_recognition as sr
from gtts import gTTS
from pydub import AudioSegment
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from handlers.voice_chat import VOICE_DIALOG
from services.openai_client import get_chatgpt_response

logger = logging.getLogger(__name__)

# –ó–∞–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline keyboard.
keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="voice_stop")]]

# –ö–¥–∞–¥–µ–º –∫–ª–∞–∏—à–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é reply_markup
reply_markup = InlineKeyboardMarkup(keyboard)

async def handle_voice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –∏ –æ—Ç–≤–µ—Ç–æ–º"""
    file_path = None
    wav_file = None
    tts_file = None
    voice_response_file = None


    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

        voice = update.message.voice
        file = await voice.get_file()
        file_path = f"voice_{update.message.message_id}.ogg"
        await file.download_to_drive(file_path)
        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ogg –≤ wav –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        try:
            audio = AudioSegment.from_ogg(file_path)
            wav_file = f"voice_{update.message.message_id}.wav"
            audio.export(wav_file, format="wav")
            logger.info("–ê—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.")
            return -1

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        recognizer = sr.Recognizer()
        try:
            with sr.AudioFile(wav_file) as source:
                audio_data = recognizer.record(source)
                text = recognizer.recognize_google(audio_data, language="ru-RU")
                # response_text = f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}"
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                user_message = text
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                context.user_data['voice_history'].append({"role": "user", "content": user_message})
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_message}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é"
                processing_msg = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... ‚è≥")

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
                logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {context.user_data['voice_history']}")

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
                response_text = await get_chatgpt_response(context.user_data['voice_history'])

                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT: {response_text}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç GPT –≤ –∏—Å—Ç–æ—Ä–∏—é
                context.user_data['voice_history'].append({"role": "assistant", "content": response_text})

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await update.message.delete()

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ OpenAi
                await processing_msg.delete()


        except sr.UnknownValueError:
            response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ."
            logger.warning("–ì–æ–ª–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        except sr.RequestError as e:
            response_text = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")

        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        try:
            tts = gTTS(text=response_text, lang='ru')
            tts_file = f"response_{update.message.message_id}.mp3"
            tts.save(tts_file)
            logger.info("TTS –∞—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ")

            audio = AudioSegment.from_mp3(tts_file)
            voice_response_file = f"response_{update.message.message_id}.ogg"
            audio.export(voice_response_file, format="ogg", codec="libopus")
            logger.info("–ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤")

            with open(voice_response_file, 'rb') as voice_file:
                await update.message.reply_voice(voice=voice_file)
                logger.info("–ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é.
            response_msg = await update.message.reply_text(
                f"ü§ñ <b>ChatGPT –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{response_text}",
                parse_mode='HTML',
                reply_markup=reply_markup
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            await update.message.reply_text(response_text)

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_files = [file_path, wav_file, tts_file, voice_response_file]
        for temp_file in temp_files:
            if temp_file and os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                    logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {temp_file}: {e}")
        return VOICE_DIALOG
