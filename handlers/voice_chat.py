"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç conversation handler –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å ChatGPT.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –ü—Ä–∏–µ–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Google Speech Recognition
- –û—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞ –≤ ChatGPT –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
- –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- –í–µ–¥–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏

–°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler:
- VOICE_DIALOG: –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å services.voice_recognition –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ.
"""

from dotenv import load_dotenv
from telegram.ext import (
                          ConversationHandler,
                          CallbackContext, ContextTypes)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import os
import logging
from handlers import basic

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
VOICE_DIALOG: int = 1

# –ó–∞–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
CAPTION_VOICE = (
    "üé§ <b>–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç —Å ChatGPT</b>\n\n"
    "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º!\n\n"
    "üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
    "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    "2. –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é –≤–∞—à—É —Ä–µ—á—å\n"
    "3. –û—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–∫—Å—Ç –≤ ChatGPT\n"
    "4. –ü–æ–ª—É—á—É –æ—Ç–≤–µ—Ç –∏ –æ–∑–≤—É—á—É –µ–≥–æ\n\n"
    "üó£Ô∏è –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."
)

async def start_voice_dialog(update: Update, context: CallbackContext) -> int:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–∏–∞–ª–æ–≥ —Å ChatGPT.

    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞, –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        int: VOICE_DIALOG –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    """
    logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.")
    context.user_data['voice_history'] = []  # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    await send_voice_menu(update, context)
    return VOICE_DIALOG

async def send_voice_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏
    inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    image_path = "data/images/voice_chat.png"
    caption = CAPTION_VOICE

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="voice_stop")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if update.message:
            await update.message.delete()

        if update.callback_query:
            query = update.callback_query
            await query.answer()

            if os.path.exists(image_path):
                try:
                    await query.message.reply_photo(
                        photo=open(image_path, 'rb'),
                        caption=caption,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                    await query.message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ: {e}")
                    await query.edit_message_text(
                        text=caption,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
            else:
                await query.edit_message_text(
                    text=caption,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        else:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            if os.path.exists(image_path):
                try:
                    await update.message.reply_photo(
                        photo=open(image_path, 'rb'),
                        caption=caption,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    await update.message.reply_text(
                        text=caption,
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
            else:
                await update.message.reply_text(
                    text=caption,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_voice_menu: {e}", exc_info=True)

async def voice_cancel(update: Update, context: CallbackContext) -> int:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        int: ConversationHandler.END –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è conversation handler
    """
    query = update.callback_query
    if query:
        await query.answer()

    logger.info("–ì–æ–ª–æ—Å–æ–≤–æ–π –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await basic.start(update, context)
    return ConversationHandler.END
