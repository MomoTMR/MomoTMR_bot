"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:
- –ö–æ–º–∞–Ω–¥–∞ /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π

–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —è–≤–ª—è—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å telegram.ext framework.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import asyncio
from handlers import chatgpt_interface

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE, reply_markup=None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π
    –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –∫–∞–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start,
    —Ç–∞–∫ –∏ —á–µ—Ä–µ–∑ callback query.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        reply_markup (InlineKeyboardMarkup, optional): –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞

    Returns:
        int: -1 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è conversation handler
    """
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –∏–ª–∏ fallback")

    welcome_text = (
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT –±–æ—Ç–∞!</b>\n\n"
        "üöÄ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç - –ø–æ–ª—É—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "‚Ä¢ ChatGPT - –æ–±—â–µ–Ω–∏–µ —Å –ò–ò\n"
        "‚Ä¢ –î–∏–∞–ª–æ–≥ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é - –≥–æ–≤–æ—Ä–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ª—é–¥—å–º–∏\n"
        "‚Ä¢ –ö–≤–∏–∑ - –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫\n\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    keyboard = [
        [InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç", callback_data="random_fact")],
        [InlineKeyboardButton("ü§ñ ChatGPT", callback_data="gpt_interface")],
        [InlineKeyboardButton("üë• –î–∏–∞–ª–æ–≥ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é", callback_data="talk_interface")],
        [InlineKeyboardButton("üß† –ü–æ–∏–≥—Ä–∞–µ–º –≤ –ö–≤–∏–∑ ?", callback_data="quiz_interface")],
        [InlineKeyboardButton("ü•∏ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏", callback_data="translate_interface")],
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç", callback_data="start_voice_dialog")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        if update.message:  # –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)
        elif update.callback_query:  # –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ callback
            query = update.callback_query
            await query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=welcome_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            await query.answer()
        return -1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)
        return -1

async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
    –ú–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è callback
    """
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω Callback –≤ basic: {query.data}")
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {context.user_data.get('state')}")

    await query.answer()

    if query.data in ["coming_soon"]:
        await query.edit_message_text(
            "üöß <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</b>\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö.\n"
            "–ü–æ–∫–∞ —á—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ '–†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç'!",
            parse_mode='HTML'
        )

        await asyncio.sleep(3)
        await start(update,context)
