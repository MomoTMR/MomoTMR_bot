"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º—ã –∫–≤–∏–∑–æ–≤.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç conversation handler –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–≤–∏–∑–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –í—ã–±–æ—Ä —Ç–µ–º—ã –∫–≤–∏–∑–∞ –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ ChatGPT –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
- –ü—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –í–µ–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã —Ç–µ–º—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–≤–∏–∑–∞

–°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler:
- SELECTING_TOPIC: –≤—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –∫–≤–∏–∑–∞
- ANSWERING_QUESTION: –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞
"""

import asyncio
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from handlers import basic
from services.openai_client import get_personality_response
from data.quiz_topics import get_quiz_topics_keyboard, get_quiz_topic_data, get_quiz_continue_keyboard

logger = logging.getLogger(__name__)

SELECTING_TOPIC, ANSWERING_QUESTION = range(2)


async def quiz_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz - –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–≤–∏–∑–æ–≤.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    logger.info('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ /quiz')
    await quiz_start(update, context)


async def quiz_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–≤–∏–∑–∞.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –∫–≤–∏–∑–∞ –∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        int: SELECTING_TOPIC –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    """
    try:
        image_path = "data/images/quiz.png"
        logger.info(f'–í –∫–≤–∏–∑–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞: {image_path}')
        message_text = (
            "üß† <b>–ö–≤–∏–∑ - –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–≤–∏–∑–∞:\n\n"
            "üíª <b>–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–¥–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö\n"
            "üèõÔ∏è <b>–ò—Å—Ç–æ—Ä–∏—è</b> - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è\n"
            "üî¨ <b>–ù–∞—É–∫–∞</b> - —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è, –±–∏–æ–ª–æ–≥–∏—è\n"
            "üåç <b>–ì–µ–æ–≥—Ä–∞—Ñ–∏—è</b> - —Å—Ç—Ä–∞–Ω—ã, —Å—Ç–æ–ª–∏—Ü—ã, –ø—Ä–∏—Ä–æ–¥–∞\n"
            "üé¨ <b>–ö–∏–Ω–æ</b> - —Ñ–∏–ª—å–º—ã, –∞–∫—Ç–µ—Ä—ã, —Ä–µ–∂–∏—Å—Å–µ—Ä—ã\n\n"
            "–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –∏–º–µ–µ—Ç 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!"
        )

        keyboard = get_quiz_topics_keyboard()

        if update.message:
            await update.message.delete()

            if os.path.exists(image_path):
                try:
                    await update.message.reply_photo(
                        photo=open(image_path, 'rb'),
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–≤–∏–∑–µ: {e}")
                    await update.message.reply_text(
                        text=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await update.message.reply_text(
                    text=message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )

        elif update.callback_query:
            query = update.callback_query
            await query.answer()

            if os.path.exists(image_path):
                try:
                    await query.message.reply_photo(
                        photo=open(image_path, 'rb'),
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
                    await query.message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback –≤ –∫–≤–∏–∑–µ: {e}")
                    await query.edit_message_text(
                        text=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await query.edit_message_text(
                    text=message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )

        return SELECTING_TOPIC

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ quiz_start: {e}", exc_info=True)
        return SELECTING_TOPIC


async def topic_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–≤–∏–∑–∞.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        int: ANSWERING_QUESTION –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    """
    query = update.callback_query
    await query.answer()

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ callback_data
        topic_key = query.data.replace("quiz_topic_", "")
        topic_data = get_quiz_topic_data(topic_key)

        if not topic_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return SELECTING_TOPIC

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['quiz_topic'] = topic_key
        context.user_data['topic_data'] = topic_data
        context.user_data['correct_answers'] = 0
        context.user_data['total_questions'] = 0

        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ –∫–≤–∏–∑–∞: {topic_key}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await generate_question(update, context)

        return ANSWERING_QUESTION

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ topic_selected: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECTING_TOPIC


async def generate_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã –∫–≤–∏–∑–∞.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChatGPT –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–º—ã
    """
    try:
        topic_data = context.user_data.get('topic_data')
        if not topic_data:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await update.callback_query.edit_message_text("ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å... ‚è≥")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ChatGPT
        question_response = await get_personality_response("–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", topic_data['prompt'])

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        parsed_question = parse_question_response(question_response)

        if not parsed_question:
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_quiz_continue_keyboard(context.user_data['quiz_topic'])
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        context.user_data['correct_answer'] = parsed_question['correct_answer']
        context.user_data['total_questions'] += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        question_text = (
            f"üìù <b>–í–æ–ø—Ä–æ—Å #{context.user_data['total_questions']}</b>\n\n"
            f"{parsed_question['question']}\n\n"
            f"A) {parsed_question['option_a']}\n"
            f"B) {parsed_question['option_b']}\n"
            f"C) {parsed_question['option_c']}\n"
            f"D) {parsed_question['option_d']}\n\n"
            f"<i>–ù–∞–ø–∏—à–∏—Ç–µ –±—É–∫–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (A, B, C –∏–ª–∏ D)</i>"
        )

        await update.callback_query.edit_message_text(
            question_text,
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_question: {e}", exc_info=True)
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.",
            reply_markup=get_quiz_continue_keyboard(context.user_data.get('quiz_topic', ''))
        )


def parse_question_response(response_text):
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç ChatGPT –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–∞.

    Args:
        response_text (str): –û—Ç–≤–µ—Ç –æ—Ç ChatGPT —Å –≤–æ–ø—Ä–æ—Å–æ–º

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    """
    try:
        lines = response_text.strip().split('\n')
        question = ""
        options = {}
        correct_answer = ""

        for line in lines:
            line = line.strip()
            if line.startswith("–í–æ–ø—Ä–æ—Å:"):
                question = line.replace("–í–æ–ø—Ä–æ—Å:", "").strip()
            elif line.startswith("A)"):
                options['option_a'] = line.replace("A)", "").strip()
            elif line.startswith("B)"):
                options['option_b'] = line.replace("B)", "").strip()
            elif line.startswith("C)"):
                options['option_c'] = line.replace("C)", "").strip()
            elif line.startswith("D)"):
                options['option_d'] = line.replace("D)", "").strip()
            elif "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:" in line:
                correct_answer = line.split(":")[-1].strip().upper()

        if question and len(options) > 2: # and correct_answer in ['A', 'B', 'C', 'D']:
            return {
                'question': question,
                'correct_answer': correct_answer,
                **options
            }
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å: {response_text}")
            return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return None


async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–≤–∏–∑ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–≤–∏–∑–∞

    Returns:
        int: ANSWERING_QUESTION –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–≤–∏–∑–∞
    """
    try:
        user_answer = update.message.text.strip().upper()
        correct_answer = context.user_data.get('correct_answer')

        if user_answer not in ['A', 'B', 'C', 'D']:
            await update.message.reply_text(
                "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –±—É–∫–≤–æ–π A, B, C –∏–ª–∏ D"
            )
            return ANSWERING_QUESTION

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = user_answer == correct_answer
        if is_correct:
            context.user_data['correct_answers'] += 1

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        correct_count = context.user_data.get('correct_answers', 0)
        total_count = context.user_data.get('total_questions', 0)

        if is_correct:
            result_text = f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>"
        else:
            result_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

        stats_text = f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {correct_count}/{total_count} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–µ–Ω—é
        await update.message.reply_text(
            result_text + stats_text,
            parse_mode='HTML',
            reply_markup=get_quiz_continue_keyboard(context.user_data['quiz_topic'])
        )

        return ANSWERING_QUESTION

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_quiz_answer: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        return ANSWERING_QUESTION


async def handle_quiz_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∏–∑–æ–º.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏:
    - "–ï—â—ë –≤–æ–ø—Ä–æ—Å" - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–æ–π –∂–µ —Ç–µ–º–µ
    - "–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã
    - "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–∏–∑" - –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∫–≤–∏–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        int: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    """
    query = update.callback_query
    await query.answer()

    if query.data.startswith("quiz_continue_"):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await generate_question(update, context)
        return ANSWERING_QUESTION

    elif query.data == "quiz_change_topic":
        # –°–º–µ–Ω–∞ —Ç–µ–º—ã
        return await quiz_start(update, context)

    elif query.data == "quiz_finish":
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
        correct_count = context.user_data.get('correct_answers', 0)
        total_count = context.user_data.get('total_questions', 0)

        final_text = (
            f"üèÅ <b>–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            f"üìä <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}/{total_count}\n"
        )

        if total_count > 0:
            percentage = (correct_count / total_count) * 100
            final_text += f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {percentage:.1f}%\n\n"

            if percentage >= 80:
                final_text += "üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            elif percentage >= 60:
                final_text += "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            elif percentage >= 40:
                final_text += "üëå –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ!"
            else:
                final_text += "üìö –°—Ç–æ–∏—Ç –ø–æ–¥—É—á–∏—Ç—å—Å—è!"

        await query.edit_message_text(final_text, parse_mode='HTML')

        context.user_data.clear()
        await asyncio.sleep(3)
        await basic.start(update, context)
        return -1

    return ANSWERING_QUESTION
