"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —è–∑—ã–∫–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç conversation handler –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —è–∑—ã–∫–∏
—Å –ø–æ–º–æ—â—å—é ChatGPT. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
- –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ (—Ä—É—Å—Å–∫–∏–π -> –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –æ–±—Ä–∞—Ç–Ω–æ)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏

–°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler:
- SELECTION_LANGUAGE: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
- CHATING_WITH_TRANSLATOR: –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞
"""

import logging

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, ConversationHandler
import os

from data.languages import get_languages_data, get_translate_keyboard
from handlers import basic
from services.openai_client import get_personality_response

logger = logging.getLogger(__name__)

SELECTION_LANGUAGE, CHATING_WITH_TRANSLATOR = range(2)

async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate - –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    await translate_start(update, context)

async def translate_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        int: SELECTION_LANGUAGE –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    """
    try:
        image_path = "data/images/translate.png"
        message_text = (
            "üåç <b>–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n"
            "–Ø –º–æ–≥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –æ–±—Ä–∞—Ç–Ω–æ!"
        )

        keyboard = get_translate_keyboard()

        if update.message:
            await update.message.delete()

            if os.path.exists(image_path):
                try:
                    await update.message.reply_photo(
                        photo=open(image_path, 'rb'),
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ: {e}")
                    await update.message.reply_text(
                        text=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await update.message.reply_text(
                    text=message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )

        elif update.callback_query:
            query = update.callback_query
            await query.answer()

            if os.path.exists(image_path):
                try:
                    await query.message.reply_photo(
                        photo=open(image_path, 'rb'),
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
                    await query.message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback –≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ: {e}")
                    await query.edit_message_text(
                        text=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await query.edit_message_text(
                    text=message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )

        return SELECTION_LANGUAGE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ translate_start: {e}", exc_info=True)
        return SELECTION_LANGUAGE

async def languages_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        int: CHATING_WITH_TRANSLATOR –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    """
    query = update.callback_query
    await query.answer()

    try:
        language_key = query.data.replace("languages_", "")
        language = get_languages_data(language_key)

        if not language:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return SELECTION_LANGUAGE

        context.user_data['current_language'] = language_key
        context.user_data['language_data'] = language

        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data="continue_translate")],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_languages")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="finish_translate")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"{language['emoji']} <b>–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {language['name']}</b>\n\n"
            f"üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ!\n\n"
            f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            f"‚Ä¢ –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?\n"
            f"‚Ä¢ Hello, how are you?\n"
            f"‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?\n\n"
            f"–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞!",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

        return CHATING_WITH_TRANSLATOR

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ languages_selected: {e}", exc_info=True)
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECTION_LANGUAGE

async def handle_languages_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.

    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ ChatGPT —Å –ø—Ä–æ–º–ø—Ç–æ–º
    –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥.

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —è–∑—ã–∫–∞

    Returns:
        int: CHATING_WITH_TRANSLATOR –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {update.message.text}")
    try:
        user_message = update.message.text
        language_key = context.user_data.get('current_language')
        language_data = context.user_data.get('language_data')

        if not language_key or not language_data:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /translate –¥–ª—è –Ω–∞—á–∞–ª–∞"
            )
            return CHATING_WITH_TRANSLATOR
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        processing_msg = await update.message.reply_text("üîÑ –ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç... ‚è≥")
        translation = await get_personality_response(user_message, language_data['prompt'])
        await processing_msg.delete()
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_languages")],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="finish_translate")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"{language_data['emoji']} <b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n\n{translation}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        return CHATING_WITH_TRANSLATOR

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_languages_message: {e}", exc_info=True)
        await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return CHATING_WITH_TRANSLATOR

async def handle_languages_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏:
    - "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥" - –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    - "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
    - "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" - –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞

    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    Returns:
        int: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    """
    query = update.callback_query
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –≤ Translator: {query.data}")
    await query.answer()

    if query.data == "continue_translate":
        language_data = context.user_data.get("language_data")
        if language_data:
            logger.info("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ç–µ–º –∂–µ —è–∑—ã–∫–æ–º")
        return CHATING_WITH_TRANSLATOR

    elif query.data == "change_languages":
        logger.info("–°–º–µ–Ω–∞ —è–∑—ã–∫–∞")
        return await translate_start(update, context)

    elif query.data == "finish_translate":
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞")
        context.user_data.clear()
        await basic.start(update, context)
        return ConversationHandler.END

    return CHATING_WITH_TRANSLATOR
