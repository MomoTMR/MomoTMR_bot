import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.openai_client import get_random_fact
from handlers import basic

logger = logging.getLogger(__name__)

# –ó–∞–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline keyboard.
keyboard = [
    [InlineKeyboardButton("üé≤ –•–æ—á—É –µ—â—ë —Ñ–∞–∫—Ç", callback_data="random_more")],
    [InlineKeyboardButton("üè† –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="random_finish")]
]

# –ö–¥–∞–¥–µ–º –∫–ª–∞–∏—à–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é reply_markup
reply_markup = InlineKeyboardMarkup(keyboard)

async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random_fact"""
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ random_fact{query.data}")
    try:
        loading_msg = await update.message.reply_text("üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç... ‚è≥")
        await loading_msg.edit_text(
            f"üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞ –æ—Ç OpenAI: {e}")
        await update.message.reply_text("ü§î –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")


async def random_fact_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤"""
    query = update.callback_query
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ {query.data}")

    await query.answer()

    if query.data in["random_more","random_fact"]:
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ random_more")
        try:
            await query.edit_message_text("üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç... ‚è≥")
            fact = await get_random_fact()
            await query.edit_message_text(
                f"üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–∫—Ç–∞: {e}")
            await query.edit_message_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
            )

    elif query.data == "random_finish":
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ random_finish")
        await basic.start_menu_again(query)