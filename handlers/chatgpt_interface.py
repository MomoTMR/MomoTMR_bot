import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from services.openai_client import get_chatgpt_response
import os

logger = logging.getLogger(__name__)


WAITING_FOR_MESSAGE = 1
# –ó–∞–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline keyboard.
keyboard = [
    [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="gpt_continue")],
    [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="gpt_finish")]
]

# –ö–¥–∞–¥–µ–º –∫–ª–∞–∏—à–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é reply_markup
reply_markup = InlineKeyboardMarkup(keyboard)

# –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
CAPTION = (
    "ü§ñ <b>ChatGPT –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</b>\n\n"
    "–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ ChatGPT!\n\n"
    "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n"
    "‚Ä¢ –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
    "‚Ä¢ –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ –∫–æ—Ç–∞\n"
    "‚Ä¢ –ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Å—Ç—É –∫–∞—Ä–±–æ–Ω–∞—Ä–∞?\n"
    "‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n"
    "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
)


async def gpt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /gpt"""
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPT")
    await gpt_start(update, context)


async def gpt_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        query = update.callback_query
        logger.info(f"–°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPT Response{query.data}")

        image_path = "data/images/chatgpt.png"

        if update.callback_query:
            query = update.callback_query
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    sent_message = await query.message.edit_media(
                        media=InputMediaPhoto(media=photo, caption=CAPTION, parse_mode='HTML'),
                        # reply_markup=reply_markup
                    )
            else:
                sent_message = await query.message.edit_text(
                    text=CAPTION,
                    parse_mode='HTML',
                    # reply_markup=reply_markup
                )
            await query.answer()
        else:
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    sent_message = await update.message.reply_photo(
                        photo=photo,
                        caption=CAPTION,
                        parse_mode='HTML',
                        # reply_markup=reply_markup
                    )
            else:
                sent_message = await update.message.reply_text(
                    CAPTION,
                    parse_mode='HTML',
                    # reply_markup=reply_markup
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['gpt_message_id'] = sent_message.message_id

        return WAITING_FOR_MESSAGE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}", exc_info=True)
        error_text = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
            await update.callback_query.message.reply_text(error_text)
        else:
            await update.message.reply_text(error_text)
        return -1

async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatGPT: {update.message.text}")
    try:
        user_message = update.message.text
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        processing_msg = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... ‚è≥")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ ChatGPT -> openai_client
        gpt_response = await get_chatgpt_response(user_message)

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT: {gpt_response}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.delete()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        await processing_msg.delete()

        if 'gpt_message_id' in context.user_data:
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {context.user_data['gpt_message_id']}")
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['gpt_message_id']
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é: {e}")

        return WAITING_FOR_MESSAGE

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "ChatGPT –æ—Ç–≤–µ—á–∞–µ—Ç:"
        sent_message = await update.message.reply_text(
            f"ü§ñ <b>ChatGPT –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{gpt_response}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ context,user_data
        context.user_data['gpt_message_id'] = sent_message.message_id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT: {context.user_data['gpt_message_id']}")

        return WAITING_FOR_MESSAGE #–û—Å—Ç–∞–µ–º—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ChatGPT: {e}", exc_info=True)
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return -1 # –í—ã—Ö–æ–¥ –∏–∑ –î–∏–∞–ª–æ–≥–∞