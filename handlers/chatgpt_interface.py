import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from handlers import basic
from services.openai_client import get_chatgpt_response
import os

logger = logging.getLogger(__name__)


WAITING_FOR_MESSAGE = 1
# –ó–∞–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è inline keyboard.
keyboard = [
    [InlineKeyboardButton("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥ —Å OpenAI", callback_data="gpt_continue")],
    [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="gpt_finish")]
]

# –ö–¥–∞–¥–µ–º –∫–ª–∞–∏—à–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é reply_markup
reply_markup = InlineKeyboardMarkup(keyboard)

# –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
CAPTION = (
    "ü§ñ <b>ChatGPT –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</b>\n\n"
    "–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ ChatGPT!\n\n"
    "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n"
    "‚Ä¢ –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
    "‚Ä¢ –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ –∫–æ—Ç–∞\n"
    "‚Ä¢ –ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Å—Ç—É –∫–∞—Ä–±–æ–Ω–∞—Ä–∞?\n"
    "‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n\n"
    "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
)


async def gpt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ ChatGPT-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    await send_gpt_menu(update, context)
    return WAITING_FOR_MESSAGE

async def continue_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("‚ñ∂Ô∏è –ü–µ—Ä–µ–∞–ø—É—Å–∫ ChatGPT-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    # await finish_gpt(update,context)
    # await send_gpt_menu(update,context)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ–±–Ω—É–ª–∏—Ç—å —á–∞—Ç !!!")
    return WAITING_FOR_MESSAGE

async def send_gpt_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    image_path = "data/images/chatgpt.png"
    caption = CAPTION

    # –£–¥–∞–ª—è–µ–º –≤—Å—ë –ª–∏—à–Ω–µ–µ
    if update.message:
        await update.message.delete()

    # await delete_previous_menu(update, context)

    if update.callback_query:
        query = update.callback_query
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                sent = await query.message.edit_media(
                    media=InputMediaPhoto(media=photo, caption=caption, parse_mode='HTML'),
                )
        else:
            sent = await query.message.edit_text(
                text=CAPTION,
                parse_mode='HTML',
            )
        await query.answer()
    else:
        if os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                sent = await update.message.reply_photo(
                    photo=photo,
                    caption=CAPTION,
                    parse_mode='HTML',
                )
        else:
            sent = await update.message.reply_text(
                CAPTION,
                parse_mode='HTML',
            )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ
    context.user_data['gpt_message_id'] = sent.message_id


async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await delete_previous_menu(update, context)
        user_message = update.message.text
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é"
        processing_msg = await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... ‚è≥")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
        gpt_response = await get_chatgpt_response(user_message)

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT: {gpt_response}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.delete()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ OpenAi
        await processing_msg.delete()


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        response_msg = await update.message.reply_text(
            f"ü§ñ <b>ChatGPT –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{gpt_response}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π `message_id` ‚Äî –º–æ–∂–Ω–æ –æ–ø—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['gpt_message_id'] = response_msg.message_id

        return WAITING_FOR_MESSAGE

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ GPT –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", exc_info=True)
        await update.message.reply_text("üòî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return -1

async def delete_previous_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_id = context.user_data.get('gpt_message_id')
    if message_id:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message_id)
        except Exception as e:
            logger.warning(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—é: {e}")


async def finish_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE,query = None) -> int:
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
    context.user_data.clear()

    # await basic.start_menu_again(query)
    await basic.start(update,context)
    return -1